"""
M√≥dulo de Presentaci√≥n
=====================
Este m√≥dulo contiene funciones para mostrar informaci√≥n de manera clara
y formateada al usuario.
"""

from typing import List, Dict, Any, Optional
from .validacion import formatear_numero, mostrar_separador, pausar_ejecucion


def mostrar_pais(pais: Dict[str, Any], mostrar_indice: bool = False, indice: int = 0):
    """
    Muestra la informaci√≥n de un pa√≠s de forma formateada.
    
    Args:
        pais (Dict[str, Any]): Datos del pa√≠s
        mostrar_indice (bool): Si debe mostrar el √≠ndice
        indice (int): N√∫mero de √≠ndice
    """
    if not pais:
        print("‚ùå No hay datos del pa√≠s para mostrar")
        return
    
    # Formatear n√∫meros
    poblacion = formatear_numero(pais['poblacion'])
    superficie = formatear_numero(pais['superficie'])
    densidad = f"{pais['densidad']:.2f}"
    
    # Mostrar informaci√≥n
    if mostrar_indice:
        print(f"{indice:3d}. ", end="")
    
    print(f"üåç {pais['nombre']}")
    print(f"   üìç Continente: {pais['continente']}")
    print(f"   üë• Poblaci√≥n: {poblacion} habitantes")
    print(f"   üìè Superficie: {superficie} km¬≤")
    print(f"   üèòÔ∏è  Densidad: {densidad} hab/km¬≤")
    print()


def mostrar_lista_paises(paises: List[Dict[str, Any]], titulo: str = "Pa√≠ses", 
                        mostrar_indices: bool = True, max_paises: Optional[int] = None):
    """
    Muestra una lista de pa√≠ses de forma formateada.
    
    Args:
        paises (List[Dict[str, Any]]): Lista de pa√≠ses
        titulo (str): T√≠tulo de la secci√≥n
        mostrar_indices (bool): Si debe mostrar √≠ndices
        max_paises (int, optional): M√°ximo n√∫mero de pa√≠ses a mostrar
    """
    if not paises:
        print(f"‚ùå No se encontraron pa√≠ses para mostrar en: {titulo}")
        return
    
    # Limitar cantidad si se especifica
    paises_a_mostrar = paises[:max_paises] if max_paises else paises
    
    print(f"\nüìã {titulo} ({len(paises_a_mostrar)} pa√≠ses)")
    mostrar_separador("-", 50)
    
    for i, pais in enumerate(paises_a_mostrar, 1):
        mostrar_pais(pais, mostrar_indices, i)
    
    # Mostrar informaci√≥n adicional si se limit√≥ la lista
    if max_paises and len(paises) > max_paises:
        print(f"... y {len(paises) - max_paises} pa√≠ses m√°s")
    
    print(f"Total: {len(paises)} pa√≠ses")


def mostrar_estadisticas_generales(estadisticas: Dict[str, Any]):
    """
    Muestra las estad√≠sticas generales de forma formateada.
    
    Args:
        estadisticas (Dict[str, Any]): Estad√≠sticas a mostrar
    """
    if not estadisticas:
        print("‚ùå No hay estad√≠sticas para mostrar")
        return
    
    print("\nüìä ESTAD√çSTICAS GENERALES")
    mostrar_separador("=", 60)
    
    # Estad√≠sticas b√°sicas
    print(f"üìà Total de pa√≠ses: {estadisticas['total_paises']}")
    print(f"üë• Poblaci√≥n mundial: {formatear_numero(estadisticas['poblacion_total'])} habitantes")
    print(f"üìè Superficie mundial: {formatear_numero(estadisticas['superficie_total'])} km¬≤")
    print(f"üèòÔ∏è  Densidad promedio: {estadisticas['densidad_promedio']} hab/km¬≤")
    
    print(f"\nüìä Poblaci√≥n promedio: {formatear_numero(estadisticas['poblacion_promedio'])} habitantes")
    print(f"üìä Superficie promedio: {formatear_numero(estadisticas['superficie_promedio'])} km¬≤")
    
    # Pa√≠ses extremos
    print(f"\nüèÜ EXTREMOS:")
    print(f"   Mayor poblaci√≥n: {estadisticas['pais_mayor_poblacion']['nombre']} "
          f"({formatear_numero(estadisticas['pais_mayor_poblacion']['poblacion'])} hab)")
    print(f"   Menor poblaci√≥n: {estadisticas['pais_menor_poblacion']['nombre']} "
          f"({formatear_numero(estadisticas['pais_menor_poblacion']['poblacion'])} hab)")
    print(f"   Mayor superficie: {estadisticas['pais_mayor_superficie']['nombre']} "
          f"({formatear_numero(estadisticas['pais_mayor_superficie']['superficie'])} km¬≤)")
    print(f"   Menor superficie: {estadisticas['pais_menor_superficie']['nombre']} "
          f"({formatear_numero(estadisticas['pais_menor_superficie']['superficie'])} km¬≤)")


def mostrar_estadisticas_continente(estadisticas: Dict[str, Any], continente: str):
    """
    Muestra las estad√≠sticas de un continente espec√≠fico.
    
    Args:
        estadisticas (Dict[str, Any]): Estad√≠sticas del continente
        continente (str): Nombre del continente
    """
    if not estadisticas:
        print(f"‚ùå No hay estad√≠sticas para el continente: {continente}")
        return
    
    print(f"\nüåç ESTAD√çSTICAS DE {continente.upper()}")
    mostrar_separador("=", 50)
    
    print(f"üìà Total de pa√≠ses: {estadisticas['total_paises']}")
    print(f"üë• Poblaci√≥n total: {formatear_numero(estadisticas['poblacion_total'])} habitantes")
    print(f"üìè Superficie total: {formatear_numero(estadisticas['superficie_total'])} km¬≤")
    print(f"üèòÔ∏è  Densidad promedio: {estadisticas['densidad_promedio']} hab/km¬≤")
    
    # Pa√≠ses extremos del continente
    print(f"\nüèÜ EXTREMOS EN {continente.upper()}:")
    print(f"   Mayor poblaci√≥n: {estadisticas['pais_mayor_poblacion']['nombre']} "
          f"({formatear_numero(estadisticas['pais_mayor_poblacion']['poblacion'])} hab)")
    print(f"   Menor poblaci√≥n: {estadisticas['pais_menor_poblacion']['nombre']} "
          f"({formatear_numero(estadisticas['pais_menor_poblacion']['poblacion'])} hab)")


def mostrar_menu_principal():
    """Muestra el men√∫ principal de la aplicaci√≥n."""
    print("\n" + "="*60)
    print("üåç SISTEMA DE GESTI√ìN DE DATOS DE PA√çSES")
    print("="*60)
    print("1. üîç Buscar pa√≠s por nombre")
    print("2. üåé Filtrar pa√≠ses por continente")
    print("3. üìä Filtrar pa√≠ses por rango de poblaci√≥n")
    print("4. üìè Filtrar pa√≠ses por rango de superficie")
    print("5. üìà Ordenar pa√≠ses por criterio")
    print("6. üèÜ Mostrar top pa√≠ses")
    print("7. üìä Mostrar estad√≠sticas generales")
    print("8. üåç Mostrar estad√≠sticas por continente")
    print("9. üîé B√∫squeda avanzada (m√∫ltiples criterios)")
    print("10. üìã Mostrar todos los pa√≠ses")
    print("11. üíæ Exportar resultados a archivo")
    print("0. üö™ Salir")
    print("="*60)


def mostrar_submenu_ordenamiento():
    """Muestra el submen√∫ de ordenamiento."""
    print("\nüìà ORDENAR PA√çSES POR:")
    print("1. Nombre (A-Z)")
    print("2. Nombre (Z-A)")
    print("3. Poblaci√≥n (Mayor a menor)")
    print("4. Poblaci√≥n (Menor a mayor)")
    print("5. Superficie (Mayor a menor)")
    print("6. Superficie (Menor a mayor)")
    print("7. Densidad (Mayor a menor)")
    print("8. Densidad (Menor a mayor)")
    print("0. Volver al men√∫ principal")


def mostrar_submenu_top():
    """Muestra el submen√∫ de top pa√≠ses."""
    print("\nüèÜ MOSTRAR TOP PA√çSES POR:")
    print("1. Poblaci√≥n (Mayor a menor)")
    print("2. Superficie (Mayor a menor)")
    print("3. Densidad (Mayor a menor)")
    print("4. Poblaci√≥n (Menor a mayor)")
    print("5. Superficie (Menor a mayor)")
    print("6. Densidad (Menor a mayor)")
    print("0. Volver al men√∫ principal")


def mostrar_continentes_disponibles(continentes: List[str]):
    """
    Muestra la lista de continentes disponibles.
    
    Args:
        continentes (List[str]): Lista de continentes
    """
    print("\nüåç CONTINENTES DISPONIBLES:")
    mostrar_separador("-", 30)
    for i, continente in enumerate(continentes, 1):
        print(f"{i:2d}. {continente}")


def mostrar_resultados_busqueda(paises: List[Dict[str, Any]], tipo_busqueda: str):
    """
    Muestra los resultados de una b√∫squeda.
    
    Args:
        paises (List[Dict[str, Any]]): Pa√≠ses encontrados
        tipo_busqueda (str): Tipo de b√∫squeda realizada
    """
    if not paises:
        print(f"‚ùå No se encontraron pa√≠ses con la b√∫squeda: {tipo_busqueda}")
        return
    
    print(f"\n‚úÖ B√∫squeda exitosa: {tipo_busqueda}")
    print(f"üìä Se encontraron {len(paises)} pa√≠ses")
    
    # Mostrar solo los primeros 10 pa√≠ses
    paises_a_mostrar = paises[:10]
    mostrar_lista_paises(paises_a_mostrar, f"Resultados de: {tipo_busqueda}")
    
    if len(paises) > 10:
        print(f"\nüí° Se encontraron {len(paises)} pa√≠ses. Mostrando los primeros 10.")
        print("   Use la opci√≥n 'Mostrar todos los pa√≠ses' para ver la lista completa.")


def mostrar_distribucion_poblacion(distribucion: Dict[str, Any]):
    """
    Muestra el an√°lisis de distribuci√≥n de poblaci√≥n.
    
    Args:
        distribucion (Dict[str, Any]): An√°lisis de distribuci√≥n
    """
    if not distribucion:
        print("‚ùå No hay datos de distribuci√≥n para mostrar")
        return
    
    print("\nüìä DISTRIBUCI√ìN DE POBLACI√ìN")
    mostrar_separador("=", 50)
    
    print(f"üìà Distribuci√≥n de poblaci√≥n:")
    print(f"   Percentil 90: {formatear_numero(distribucion['percentil_90'])} habitantes")
    print(f"   Mediana: {formatear_numero(distribucion['mediana'])} habitantes")
    
    print(f"\nüìä Clasificaci√≥n por tama√±o:")
    print(f"   üåü Pa√≠ses grandes (top 10%): {distribucion['paises_grandes']} pa√≠ses")
    print(f"   üìâ Pa√≠ses peque√±os (bottom 50%): {distribucion['paises_peque√±os']} pa√≠ses")
    
    # Mostrar algunos ejemplos
    if distribucion['lista_grandes']:
        print(f"\nüèÜ Top 5 pa√≠ses m√°s poblados:")
        for i, pais in enumerate(distribucion['lista_grandes'][:5], 1):
            print(f"   {i}. {pais['nombre']}: {formatear_numero(pais['poblacion'])} habitantes")


def mostrar_correlacion(correlacion: float):
    """
    Muestra la correlaci√≥n entre poblaci√≥n y superficie.
    
    Args:
        correlacion (float): Coeficiente de correlaci√≥n
    """
    print(f"\nüìä CORRELACI√ìN POBLACI√ìN-SUPERFICIE")
    mostrar_separador("-", 40)
    
    print(f"üîó Coeficiente de correlaci√≥n: {correlacion}")
    
    if correlacion > 0.7:
        interpretacion = "Correlaci√≥n fuerte positiva"
    elif correlacion > 0.3:
        interpretacion = "Correlaci√≥n moderada positiva"
    elif correlacion > -0.3:
        interpretacion = "Correlaci√≥n d√©bil o nula"
    elif correlacion > -0.7:
        interpretacion = "Correlaci√≥n moderada negativa"
    else:
        interpretacion = "Correlaci√≥n fuerte negativa"
    
    print(f"üìù Interpretaci√≥n: {interpretacion}")



def exportar_a_archivo(paises: List[Dict[str, Any]], nombre_archivo: str, 
                      formato: str = 'txt') -> bool:
    """
    Exporta una lista de pa√≠ses a un archivo.
    
    Args:
        paises (List[Dict[str, Any]]): Lista de pa√≠ses
        nombre_archivo (str): Nombre del archivo
        formato (str): Formato de exportaci√≥n ('txt' o 'csv')
        
    Returns:
        bool: True si la exportaci√≥n fue exitosa
    """
    try:
        if formato == 'txt':
            with open(nombre_archivo, 'w', encoding='utf-8') as archivo:
                archivo.write("LISTA DE PA√çSES\n")
                archivo.write("=" * 50 + "\n\n")
                
                for i, pais in enumerate(paises, 1):
                    archivo.write(f"{i}. {pais['nombre']}\n")
                    archivo.write(f"   Continente: {pais['continente']}\n")
                    archivo.write(f"   Poblaci√≥n: {formatear_numero(pais['poblacion'])} habitantes\n")
                    archivo.write(f"   Superficie: {formatear_numero(pais['superficie'])} km¬≤\n")
                    archivo.write(f"   Densidad: {pais['densidad']:.2f} hab/km¬≤\n\n")
        
        elif formato == 'csv':
            import csv
            with open(nombre_archivo, 'w', encoding='utf-8', newline='') as archivo:
                if paises:
                    campos = paises[0].keys()
                    escritor = csv.DictWriter(archivo, fieldnames=campos)
                    escritor.writeheader()
                    escritor.writerows(paises)
        
        print(f"‚úÖ Archivo exportado exitosamente: {nombre_archivo}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error al exportar archivo: {e}")
        return False

