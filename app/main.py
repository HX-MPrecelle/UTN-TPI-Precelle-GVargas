#!/usr/bin/env python3
"""
Sistema de Gesti√≥n de Datos de Pa√≠ses - Aplicaci√≥n Principal
============================================================
Trabajo Pr√°ctico Integrador (TPI) - Programaci√≥n I
Universidad Tecnol√≥gica Nacional (UTN)

Integrantes:
- Precelle, Mart√≠n Nicol√°s
- Garc√≠a Vargas, Marcos

Este archivo contiene la aplicaci√≥n principal que coordina todos los m√≥dulos
del sistema de gesti√≥n de datos de pa√≠ses.
"""

import sys
import os
from typing import List, Dict, Any, Optional

# Agregar el directorio de m√≥dulos al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'modulos'))

# Importar todos los m√≥dulos
from modulos.carga_datos import cargar_datos_csv, verificar_integridad_datos
from modulos.validacion import (
    validar_entrada_numero, pausar_ejecucion, mostrar_separador
)
from modulos.consultas import (
    buscar_pais_por_nombre, filtrar_por_continente,
    filtrar_por_rango_poblacion, filtrar_por_rango_superficie,
    buscar_paises_multiples_criterios, obtener_continentes_disponibles,
    buscar_paises_top, buscar_paises_bottom
)
from modulos.ordenamiento import ordenar_personalizado
from modulos.estadisticas import (
    calcular_estadisticas_generales, calcular_estadisticas_continente,)
from modulos.presentacion import (
    mostrar_menu_principal, mostrar_submenu_ordenamiento, mostrar_submenu_top,
    mostrar_continentes_disponibles, mostrar_resultados_busqueda,
    mostrar_lista_paises, mostrar_estadisticas_generales,
    mostrar_estadisticas_continente, exportar_a_archivo
)



"""Inicializo las variables."""
paises = []
ruta_datos = 'data/paises.csv'
resultados_actuales = []
        
        
def inicializar_datos() :
    """
    Carga e inicializa los datos de pa√≠ses desde el archivo CSV.
    
    Returns:
        bool: True si la carga fue exitosa, False en caso contrario
    """
    global paises
    print("üîÑ Iniciando sistema...")
    mostrar_separador("-", 50)
    
    try:
        # Cargar datos
        print(f"üìÇ Cargando datos desde: {ruta_datos}")
        datos = cargar_datos_csv(ruta_datos)
        if not datos:
            print("‚ùå No se pudieron cargar los datos del archivo CSV")
            return False
        
        # Verificar integridad
        print("üîç Verificando integridad de datos...")
        if not verificar_integridad_datos(datos):
            print("‚ùå Los datos no pasaron la verificaci√≥n de integridad")
            return False
        
        #Asignar la variable global
        paises = datos

        print(f"‚úÖ Sistema inicializado correctamente")
        print(f"üìä {len(paises)} pa√≠ses cargados exitosamente")
        mostrar_separador("-", 50)
        return True
        
    except Exception as e:
        print(f"‚ùå Error al inicializar el sistema: {e}")
        return False

def ejecutar_busqueda_por_nombre():
    """Ejecuta la b√∫squeda de pa√≠ses por nombre."""
    print("\nüîç B√öSQUEDA POR NOMBRE")
    mostrar_separador("-", 30)
    
    nombre = input("Ingrese el nombre del pa√≠s a buscar: ").strip()
    if not nombre:
        print("‚ùå Debe ingresar un nombre v√°lido")
        return
    
    # Buscar pa√≠ses
    resultados = buscar_pais_por_nombre(paises, nombre)
    resultados_actuales = resultados
    
    # Mostrar resultados
    mostrar_resultados_busqueda(resultados, f"Pa√≠ses que contienen '{nombre}'")
    
    pausar_ejecucion()

def ejecutar_filtro_por_continente():
    """Ejecuta el filtrado de pa√≠ses por continente."""
    print("\nüåç FILTRADO POR CONTINENTE")
    mostrar_separador("-", 35)
    
    global resultados_actuales
    # Mostrar continentes disponibles
    continentes = obtener_continentes_disponibles(paises)
    if not continentes:
        print("‚ùå No hay continentes para utilizar")
        pausar_ejecucion()
        return
    
    mostrar_continentes_disponibles(continentes)
    
    # Solicitar selecci√≥n
    try:
        opcion = int(input(f"\nSeleccione un continente (1-{len(continentes)}): "))
        if 1 <= opcion <= len(continentes):
            continente_seleccionado = continentes[opcion - 1]
            resultados = filtrar_por_continente(paises, continente_seleccionado)
            resultados_actuales = resultados
            
            mostrar_resultados_busqueda(resultados, f"Pa√≠ses de {continente_seleccionado}")
        else:
            print("‚ùå Opci√≥n inv√°lida")
    except ValueError:
        print("‚ùå Debe ingresar un n√∫mero v√°lido")
    
    pausar_ejecucion()

def ejecutar_filtro_por_poblacion():
    """Ejecuta el filtrado de pa√≠ses por rango de poblaci√≥n."""
    print("\nüìä FILTRADO POR POBLACI√ìN")
    mostrar_separador("-", 35)
    
    global resultados_actuales

    try:
        poblacion_min = validar_entrada_numero(input("Ingrese poblaci√≥n m√≠nima: "), 0, 2000000000
        )

        poblacion_max = validar_entrada_numero(input("Ingrese poblaci√≥n m√°xima: "), poblacion_min, 2000000000
        )

        if poblacion_min is None or poblacion_max is None:
            print("‚ùå Debe ingresar parametros v√°lidos en ambos casos")
            pausar_ejecucion()
            return

        if poblacion_min > poblacion_max:
            print("‚ùå El rango m√≠nimo NO puede ser mayor que el m√°ximo")
            pausar_ejecucion()
            return

        resultados = filtrar_por_rango_poblacion(paises, poblacion_min, poblacion_max)
        resultados_actuales = resultados
        mostrar_resultados_busqueda(resultados, 
            f"Pa√≠ses con poblaci√≥n entre {poblacion_min:,} y {poblacion_max:,} habitantes")
        
    except ValueError:
        print("‚ùå Debe ingresar un n√∫mero v√°lido")
    except Exception as e:
        print(f"‚ùå Error en el filtrado: {e}")
    
    pausar_ejecucion()

def ejecutar_filtro_por_superficie():
    """Ejecuta el filtrado de pa√≠ses por rango de superficie."""
    print("\nüìè FILTRADO POR SUPERFICIE")
    mostrar_separador("-", 35)
    global resultados_actuales

    try:
        superficie_min = validar_entrada_numero(
            input("Ingrese superficie m√≠nima (km¬≤): "), 0, 20000000
        )
        superficie_max = validar_entrada_numero(
            input("Ingrese superficie m√°xima (km¬≤): "), superficie_min, 20000000
        )
        
        if superficie_min is not None and superficie_max is not None:
            resultados = filtrar_por_rango_superficie(
                paises, superficie_min, superficie_max
            )
            resultados_actuales = resultados
            
            mostrar_resultados_busqueda(
                resultados, 
                f"Pa√≠ses con superficie entre {superficie_min:,} y {superficie_max:,} km¬≤"
            )
    except Exception as e:
        print(f"‚ùå Error en el filtrado: {e}")
    
    pausar_ejecucion()

def ejecutar_ordenamiento():
    """Ejecuta el ordenamiento de pa√≠ses."""
    print("\nüìà ORDENAMIENTO DE PA√çSES")
    mostrar_separador("-", 35)
    global resultados_actuales

    # Mostrar submen√∫ de ordenamiento
    mostrar_submenu_ordenamiento()
    
    try:
        opcion = int(input("\nSeleccione una opci√≥n: "))
        
        # Mapeo de opciones a criterios y direcciones
        opciones_ordenamiento = {
            1: ('nombre', False),      # A-Z
            2: ('nombre', True),       # Z-A
            3: ('poblacion', True),    # Mayor a menor
            4: ('poblacion', False),   # Menor a mayor
            5: ('superficie', True),   # Mayor a menor
            6: ('superficie', False),  # Menor a mayor
        }
        
        if opcion in opciones_ordenamiento:
            criterio, descendente = opciones_ordenamiento[opcion]
            
            # Determinar qu√© datos ordenar
            datos_a_ordenar = resultados_actuales if resultados_actuales else paises
            if not datos_a_ordenar:
                print("‚ùå No hay datos para ordenar")
                pausar_ejecucion()
                return

            resultados = ordenar_personalizado(datos_a_ordenar, criterio, descendente)
            resultados_actuales = resultados
            
            # Mostrar resultados
            direccion = "mayor a menor" if descendente else "menor a mayor"
            titulo = f"Pa√≠ses ordenados por {criterio} ({direccion})"
            mostrar_lista_paises(resultados, titulo, max_paises=20)
            
        elif opcion == 0:
            return  # Volver al men√∫ principal
        else:
            print("‚ùå Opci√≥n inv√°lida")
            
    except ValueError:
        print("‚ùå Debe ingresar un n√∫mero v√°lido")
    
    pausar_ejecucion()

def ejecutar_top_paises():
    """Ejecuta la visualizaci√≥n de pa√≠ses top."""
    print("\nüèÜ TOP PA√çSES")
    mostrar_separador("-", 25)
    
    # Mostrar submen√∫ de top pa√≠ses
    mostrar_submenu_top()
    
    global resultados_actuales

    try:
        opcion = int(input("\nSeleccione una opci√≥n: "))
        
        # Solicitar cantidad
        cantidad = validar_entrada_numero(
            input("¬øCu√°ntos pa√≠ses desea mostrar? (1-50): "), 1, 50
        )
        
        if cantidad is None:
            return
        
        opciones_top = {
            1: ('poblacion', True),    # Mayor poblaci√≥n
            2: ('superficie', True),   # Mayor superficie
            3: ('poblacion', False),   # Menor poblaci√≥n
            4: ('superficie', False),  # Menor superficie
        }
        
        if opcion in opciones_top:
            criterio, descendente = opciones_top[opcion]
            
            if descendente:
                resultados = buscar_paises_top(paises, criterio, cantidad)
            else:
                resultados = buscar_paises_bottom(paises, criterio, cantidad)
            
            resultados_actuales = resultados
            
            # Mostrar resultados
            direccion = "mayor" if descendente else "menor"
            titulo = f"Top {cantidad} pa√≠ses con {direccion} {criterio}"
            mostrar_lista_paises(resultados, titulo)
            
        elif opcion == 0:
            return  # Volver al men√∫ principal
        else:
            print("‚ùå Opci√≥n inv√°lida")
            
    except ValueError:
        print("‚ùå Debe ingresar un n√∫mero v√°lido")
    
    pausar_ejecucion()

def ejecutar_estadisticas_generales():
    """Ejecuta el c√°lculo y visualizaci√≥n de estad√≠sticas generales."""
    
    try:
        estadisticas = calcular_estadisticas_generales(paises)
        if estadisticas:
            mostrar_estadisticas_generales(estadisticas)

        else:
            print("‚ùå No se pudieron calcular las estad√≠sticas")
            
    except Exception as e:
        print(f"‚ùå Error al calcular estad√≠sticas: {e}")
    
    pausar_ejecucion()

def ejecutar_estadisticas_continente():
    """Ejecuta el c√°lculo y visualizaci√≥n de estad√≠sticas por continente."""
    print("\nüåç ESTAD√çSTICAS POR CONTINENTE")
    mostrar_separador("-", 45)
    
    # Mostrar continentes disponibles
    continentes = obtener_continentes_disponibles(paises)
    mostrar_continentes_disponibles(continentes)
    
    try:
        opcion = int(input(f"\nSeleccione un continente (1-{len(continentes)}): "))
        if 1 <= opcion <= len(continentes):
            continente_seleccionado = continentes[opcion - 1]
            
            estadisticas = calcular_estadisticas_continente(paises, continente_seleccionado)
            if estadisticas:
                mostrar_estadisticas_continente(estadisticas, continente_seleccionado)
            else:
                print(f"‚ùå No se pudieron calcular las estad√≠sticas para {continente_seleccionado}")
        else:
            print("‚ùå Opci√≥n inv√°lida")
    except ValueError:
        print("‚ùå Debe ingresar un n√∫mero v√°lido")
    
    pausar_ejecucion()

def ejecutar_busqueda_avanzada():
    """Ejecuta la b√∫squeda avanzada con m√∫ltiples criterios."""
    print("\nüîé B√öSQUEDA AVANZADA")
    mostrar_separador("-", 30)
    
    print("Complete los criterios que desee aplicar (deje en blanco para omitir):")
    
    global resultados_actuales

    # Continente
    continentes = obtener_continentes_disponibles(paises)
    mostrar_continentes_disponibles(continentes)
    
    continente = None
    try:
        opcion_continente = input(f"\nSeleccione continente (1-{len(continentes)}) o Enter para omitir: ").strip()
        if opcion_continente:
            opcion = int(opcion_continente)
            if 1 <= opcion <= len(continentes):
                continente = continentes[opcion - 1]
    except ValueError:
        pass
    
    # Rango de poblaci√≥n
    poblacion_min = None
    poblacion_max = None
    try:
        poblacion_min_input = input("Poblaci√≥n m√≠nima (Enter para omitir): ").strip()
        if poblacion_min_input:
            poblacion_min = int(poblacion_min_input)
        
        poblacion_max_input = input("Poblaci√≥n m√°xima (Enter para omitir): ").strip()
        if poblacion_max_input:
            poblacion_max = int(poblacion_max_input)
    except ValueError:
        print("‚ö†Ô∏è Valores de poblaci√≥n inv√°lidos, se omitir√°n")
    
    # Rango de superficie
    superficie_min = None
    superficie_max = None
    try:
        superficie_min_input = input("Superficie m√≠nima (km¬≤, Enter para omitir): ").strip()
        if superficie_min_input:
            superficie_min = int(superficie_min_input)
        
        superficie_max_input = input("Superficie m√°xima (km¬≤, Enter para omitir): ").strip()
        if superficie_max_input:
            superficie_max = int(superficie_max_input)
    except ValueError:
        print("‚ö†Ô∏è Valores de superficie inv√°lidos, se omitir√°n")
    
    # Nombre que contenga
    nombre_contiene = input("Nombre debe contener (Enter para omitir): ").strip()
    if not nombre_contiene:
        nombre_contiene = None
    
    # Ejecutar b√∫squeda
    try:
        resultados = buscar_paises_multiples_criterios(
            paises,
            continente=continente,
            poblacion_min=poblacion_min,
            poblacion_max=poblacion_max,
            superficie_min=superficie_min,
            superficie_max=superficie_max,
            nombre_contiene=nombre_contiene
        )
        
        resultados_actuales = resultados
        
        # Crear descripci√≥n de la b√∫squeda
        criterios = []
        if continente:
            criterios.append(f"continente: {continente}")
        if poblacion_min or poblacion_max:
            criterios.append(f"poblaci√≥n: {poblacion_min or 0}-{poblacion_max or '‚àû'}")
        if superficie_min or superficie_max:
            criterios.append(f"superficie: {superficie_min or 0}-{superficie_max or '‚àû'}")
        if nombre_contiene:
            criterios.append(f"nombre contiene: '{nombre_contiene}'")
        
        descripcion = "B√∫squeda avanzada con criterios: " + ", ".join(criterios)
        mostrar_resultados_busqueda(resultados, descripcion)
        
    except Exception as e:
        print(f"‚ùå Error en la b√∫squeda avanzada: {e}")
    
    pausar_ejecucion()

def ejecutar_mostrar_todos():
    """Ejecuta la visualizaci√≥n de todos los pa√≠ses."""
    print("\nüìã TODOS LOS PA√çSES")
    mostrar_separador("-", 25)

    global resultados_actuales

    # Preguntar si mostrar todos o una cantidad limitada
    try:
        cantidad = input("¬øCu√°ntos pa√≠ses mostrar? (Enter para mostrar todos): ").strip()
        max_paises = None
        
        if cantidad:
            max_paises = validar_entrada_numero(cantidad, 1, len(paises))
            if max_paises is None:
                print("‚ùå Cantidad inv√°lida, mostrando todos")
                max_paises = None
        
        mostrar_lista_paises(paises, "Todos los pa√≠ses", max_paises=max_paises)
        resultados_actuales = paises
        
    except Exception as e:
        print(f"‚ùå Error al mostrar pa√≠ses: {e}")
    
    pausar_ejecucion()

def ejecutar_exportar_resultados():
    """Ejecuta la exportaci√≥n de resultados a archivo."""
    print("\nüíæ EXPORTAR RESULTADOS")
    mostrar_separador("-", 30)

    global resultados_actuales
    
    if not resultados_actuales:
        print("‚ùå No hay resultados para exportar")
        print("üí° Realice una b√∫squeda, filtro u ordenamiento primero")
        pausar_ejecucion()
        return
    
    try:
        # Solicitar nombre de archivo
        nombre_archivo = input("Ingrese el nombre del archivo (sin extensi√≥n): ").strip()
        if not nombre_archivo:
            nombre_archivo = "resultados_paises"
        
        # Solicitar formato
        print("\nFormatos disponibles:")
        print("1. Texto (.txt)")
        print("2. CSV (.csv)")
        
        formato_opcion = input("Seleccione formato (1-2): ").strip()
        
        if formato_opcion == "1":
            nombre_archivo += ".txt"
            formato = "txt"
        elif formato_opcion == "2":
            nombre_archivo += ".csv"
            formato = "csv"
        else:
            print("‚ùå Formato inv√°lido, usando texto por defecto")
            nombre_archivo += ".txt"
            formato = "txt"
        
        # Exportar
        if exportar_a_archivo(resultados_actuales, nombre_archivo, formato):
            print(f"‚úÖ {len(resultados_actuales)} pa√≠ses exportados exitosamente")
        
    except Exception as e:
        print(f"‚ùå Error al exportar: {e}")
    
    pausar_ejecucion()

def ejecutar_menu_principal():
    """Ejecuta el men√∫ principal de la aplicaci√≥n."""
    while True:
        try:
            mostrar_menu_principal()
            opcion = int(input("\nSeleccione una opci√≥n: "))
            
            if opcion == 0:
                print("\nüëã ¬°Gracias por usar el Sistema de Gesti√≥n de Datos de Pa√≠ses!")
                print("üåç Desarrollado por: Precelle, Mart√≠n Nicol√°s y Garc√≠a Vargas, Marcos")
                print("üè´ Universidad Tecnol√≥gica Nacional - Programaci√≥n I")
                break
            elif opcion == 1:
                ejecutar_busqueda_por_nombre()
            elif opcion == 2:
                ejecutar_filtro_por_continente()
            elif opcion == 3:
                ejecutar_filtro_por_poblacion()
            elif opcion == 4:
                ejecutar_filtro_por_superficie()
            elif opcion == 5:
                ejecutar_ordenamiento()
            elif opcion == 6:
                ejecutar_top_paises()
            elif opcion == 7:
                ejecutar_estadisticas_generales()
            elif opcion == 8:
                ejecutar_estadisticas_continente()
            elif opcion == 9:
                ejecutar_busqueda_avanzada()
            elif opcion == 10:
                ejecutar_mostrar_todos()
            elif opcion == 11:
                ejecutar_exportar_resultados()
            else:
                print("‚ùå Opci√≥n inv√°lida. Por favor, seleccione una opci√≥n del men√∫.")
                pausar_ejecucion()
                
        except ValueError:
            print("‚ùå Debe ingresar un n√∫mero v√°lido.")
            pausar_ejecucion()
        except KeyboardInterrupt:
            print("\n\nüëã Aplicaci√≥n interrumpida por el usuario.")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            pausar_ejecucion()

def ejecutar() -> None:
    """Ejecuta la aplicaci√≥n completa."""
    print("=" * 60)
    print("Trabajo Pr√°ctico Integrador (TPI) - Programaci√≥n I")
    print("Universidad Tecnol√≥gica Nacional (UTN)")
    print("Integrantes: Precelle, Mart√≠n Nicol√°s y Garc√≠a Vargas, Marcos")
    print("=" * 60)
    
    # Inicializar datos
    if not inicializar_datos():
        print("‚ùå No se pudo inicializar el sistema. Verifique que el archivo de datos existe.")
        return
    # Ejecutar men√∫ principal
    ejecutar_menu_principal()


if __name__ == "__main__" :
    try:
        ejecutar()
    except Exception as e:
        print(f"Error en inicializaci√≥n: {e}")

